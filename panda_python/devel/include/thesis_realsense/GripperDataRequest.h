// Generated by gencpp from file thesis_realsense/GripperDataRequest.msg
// DO NOT EDIT!


#ifndef THESIS_REALSENSE_MESSAGE_GRIPPERDATAREQUEST_H
#define THESIS_REALSENSE_MESSAGE_GRIPPERDATAREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/PoseStamped.h>
#include <geometry_msgs/PoseStamped.h>

namespace thesis_realsense
{
template <class ContainerAllocator>
struct GripperDataRequest_
{
  typedef GripperDataRequest_<ContainerAllocator> Type;

  GripperDataRequest_()
    : id()
    , grasp_pose()
    , max_contact_force(0.0)
    , max_contact_velocity(0.0)
    , max_contact_width(0.0)
    , release_pose()  {
    }
  GripperDataRequest_(const ContainerAllocator& _alloc)
    : id(_alloc)
    , grasp_pose(_alloc)
    , max_contact_force(0.0)
    , max_contact_velocity(0.0)
    , max_contact_width(0.0)
    , release_pose(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _id_type;
  _id_type id;

   typedef  ::geometry_msgs::PoseStamped_<ContainerAllocator>  _grasp_pose_type;
  _grasp_pose_type grasp_pose;

   typedef float _max_contact_force_type;
  _max_contact_force_type max_contact_force;

   typedef float _max_contact_velocity_type;
  _max_contact_velocity_type max_contact_velocity;

   typedef float _max_contact_width_type;
  _max_contact_width_type max_contact_width;

   typedef  ::geometry_msgs::PoseStamped_<ContainerAllocator>  _release_pose_type;
  _release_pose_type release_pose;





  typedef boost::shared_ptr< ::thesis_realsense::GripperDataRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::thesis_realsense::GripperDataRequest_<ContainerAllocator> const> ConstPtr;

}; // struct GripperDataRequest_

typedef ::thesis_realsense::GripperDataRequest_<std::allocator<void> > GripperDataRequest;

typedef boost::shared_ptr< ::thesis_realsense::GripperDataRequest > GripperDataRequestPtr;
typedef boost::shared_ptr< ::thesis_realsense::GripperDataRequest const> GripperDataRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::thesis_realsense::GripperDataRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::thesis_realsense::GripperDataRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace thesis_realsense

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::thesis_realsense::GripperDataRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::thesis_realsense::GripperDataRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::thesis_realsense::GripperDataRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::thesis_realsense::GripperDataRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::thesis_realsense::GripperDataRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::thesis_realsense::GripperDataRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::thesis_realsense::GripperDataRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dd2d7cc6032573dfb33b714a9555f6f2";
  }

  static const char* value(const ::thesis_realsense::GripperDataRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdd2d7cc6032573dfULL;
  static const uint64_t static_value2 = 0xb33b714a9555f6f2ULL;
};

template<class ContainerAllocator>
struct DataType< ::thesis_realsense::GripperDataRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "thesis_realsense/GripperDataRequest";
  }

  static const char* value(const ::thesis_realsense::GripperDataRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::thesis_realsense::GripperDataRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n\
string id\n\
\n\
\n\
\n\
\n\
\n\
geometry_msgs/PoseStamped grasp_pose\n\
\n\
\n\
float32 max_contact_force\n\
\n\
\n\
float32 max_contact_velocity\n\
\n\
\n\
float32 max_contact_width\n\
\n\
\n\
\n\
\n\
\n\
geometry_msgs/PoseStamped release_pose\n\
\n\
================================================================================\n\
MSG: geometry_msgs/PoseStamped\n\
# A Pose with reference coordinate frame and timestamp\n\
Header header\n\
Pose pose\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of position and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
";
  }

  static const char* value(const ::thesis_realsense::GripperDataRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::thesis_realsense::GripperDataRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.grasp_pose);
      stream.next(m.max_contact_force);
      stream.next(m.max_contact_velocity);
      stream.next(m.max_contact_width);
      stream.next(m.release_pose);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GripperDataRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::thesis_realsense::GripperDataRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::thesis_realsense::GripperDataRequest_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.id);
    s << indent << "grasp_pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::PoseStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.grasp_pose);
    s << indent << "max_contact_force: ";
    Printer<float>::stream(s, indent + "  ", v.max_contact_force);
    s << indent << "max_contact_velocity: ";
    Printer<float>::stream(s, indent + "  ", v.max_contact_velocity);
    s << indent << "max_contact_width: ";
    Printer<float>::stream(s, indent + "  ", v.max_contact_width);
    s << indent << "release_pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::PoseStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.release_pose);
  }
};

} // namespace message_operations
} // namespace ros

#endif // THESIS_REALSENSE_MESSAGE_GRIPPERDATAREQUEST_H
